@inject NavigationManager navigationManager

@if (this.servers != null && this.servers.Count > 0)
{
    <ul>
        @* @foreach (Server server in servers)
    {
    <li @key="server.ServerId">
    @server.Name  in @server.City is
    <span style="color:@((server.IsOnline ? "green" : "red " )) ">
    @(server.IsOnline ? "Online" : "Offline")
    </span>
    <a href="/servers/@server.ServerId" class="btn btn-link">Edit</a>
    &nbsp;
    <EditForm Model="server" FormName="@($"form-server-{server.ServerId}")" OnValidSubmit="@(() => DeleteServer(server.ServerId))">
    <button type="submit" class="btn btn-danger">Delete  </button>
    </EditForm>

    </li>
    } *@

        <Virtualize Items="this.servers" Context="server">
            <li @key="server.ServerId">
                @server.Name  in @server.City is
                <span style="color:@((server.IsOnline ? "green" : "red " )) ">
                    @(server.IsOnline ? "Online" : "Offline")
                </span>
                <a href="/servers/@server.ServerId" class="btn btn-link">Edit</a>
                &nbsp;
                <EditForm Model="server" FormName="@($"form-server-{server.ServerId}")" OnValidSubmit="@(() => DeleteServer(server.ServerId))">
                    <button type="submit" class="btn btn-danger">Delete  </button>
                </EditForm>

            </li>
        </Virtualize>

    </ul>
}



@code {

    [Parameter]
    public string? CityName { get; set; }

    private List<Server>? servers;

    protected override void OnParametersSet()
    {
        servers = ServersRepository.GetServersByCity(CityName ?? "Toronto");
    }

    private void DeleteServer(int id)
    {
        if (id > 0)
        {
            ServersRepository.DeleteServer(id);
            navigationManager.NavigateTo("/servers", true);
        }
    }
}
